import { ElementType, GenerationElement } from '@/types'

export const seedData: Record<ElementType, string[]> = {
  persona: [
    "Scrum Masters",
    "Product Managers",
    "Startup Founders",
    "Growth Marketers",
    "DevOps Engineers",
    "Data Scientists",
    "ML Engineers",
    "QA Leads",
    "UX Researchers",
    "Teachers",
    "University Admins",
    "Hospital Ward Managers",
    "Nurses",
    "GPs",
    "Psychologists",
    "Physiotherapists",
    "Real Estate Agents",
    "Mortgage Brokers",
    "Accountants",
    "Bookkeepers",
    "SMB Owners",
    "Indie Hackers",
    "Content Creators",
    "YouTubers",
    "Podcasters",
    "HR Managers",
    "Talent Acquisition Leads",
    "Compliance Officers",
    "Procurement Managers",
    "Customer Success Managers"
  ],
  problem: [
    "Context switching",
    "Compliance evidence collection",
    "Manual onboarding",
    "Poor backlog hygiene",
    "Sprint reporting overhead",
    "Duplicate knowledge",
    "Meeting overload",
    "Incident postmortems",
    "Release coordination",
    "Shadow IT",
    "Data silos",
    "Slow estimates",
    "Retro action follow-through",
    "Feature creep",
    "Prioritisation conflicts",
    "Lack of stakeholder visibility",
    "Customer churn detection",
    "Manual QA regression",
    "Test flakiness",
    "Weak documentation",
    "Version drift",
    "Pricing page comparisons",
    "Competitor tracking",
    "Forecasting uncertainty",
    "Low adoption analytics",
    "Fragmented tooling",
    "Permission sprawl",
    "Access reviews",
    "Vendor risk management",
    "Carbon reporting",
    "Privacy-by-default",
    "AI hallucinations",
    "Prompt management",
    "Feature flag chaos",
    "Alert fatigue",
    "Low retention onboarding"
  ],
  technology: [
    "LLMs",
    "RAG",
    "Vector DBs (pgvector)",
    "WebRTC",
    "Edge AI",
    "On-device ML",
    "OCR",
    "Speech-to-Text",
    "TTS",
    "Recommender Systems",
    "Graph Databases",
    "WebAssembly",
    "Rust for WASI",
    "Serverless Functions",
    "Cloudflare Workers",
    "Deno",
    "Webhooks",
    "Event Sourcing",
    "CQRS",
    "Temporal.io",
    "Headless Browsers",
    "Puppeteer/Playwright",
    "Browser Extensions",
    "ARKit/ARCore",
    "Computer Vision",
    "Low-code/No-code",
    "AutoML",
    "MLOps",
    "Feature Stores",
    "Kubernetes",
    "OpenTelemetry",
    "Privacy-preserving ML (FHE/DP)",
    "Blockchain",
    "Smart Contracts",
    "Zero-Knowledge Proofs",
    "Robotic Process Automation"
  ],
  format: [
    "SaaS",
    "API",
    "CLI tool",
    "Browser extension",
    "VS Code extension",
    "Slack/Teams app",
    "Notion plugin",
    "Figma plugin",
    "Marketplace",
    "Template pack",
    "Ops service",
    "Data product",
    "SDK",
    "Mobile app",
    "Desktop app",
    "Workflow engine",
    "Chrome extension",
    "Micro-SaaS"
  ],
  business_model: [
    "Per-seat subscription",
    "Usage-based",
    "Tiered SaaS",
    "Freemium â†’ Pro",
    "Lifetime deal",
    "Transaction fee",
    "Revenue share",
    "Licensing",
    "Open-core",
    "Consultancy + productised add-ons",
    "Ads-supported",
    "Affiliate",
    "Pay-as-you-go credits",
    "Enterprise annual contract",
    "Premium support",
    "White-label"
  ],
  channel: [
    "Slack",
    "Microsoft Teams",
    "Notion",
    "Confluence",
    "Jira",
    "Linear",
    "GitHub",
    "GitLab",
    "Figma",
    "Shopify",
    "Stripe",
    "HubSpot",
    "Salesforce",
    "WhatsApp",
    "Gmail",
    "Outlook"
  ],
  action_verb: [
    "Automate",
    "Aggregate",
    "Standardise",
    "Normalise",
    "Enrich",
    "Visualise",
    "Predict",
    "Recommend",
    "Cluster",
    "Summarise",
    "Classify",
    "Extract",
    "Validate",
    "Monitor",
    "Alert",
    "Audit",
    "Version",
    "Track",
    "Orchestrate",
    "Optimise",
    "Personalise",
    "Anonymise",
    "Redact",
    "Benchmark"
  ],
  trend: [
    "Privacy-first",
    "Carbon-aware",
    "Offline-first",
    "Low-code friendly",
    "No PII",
    "On-prem optional",
    "SOC2-ready",
    "ISO 27001-ready",
    "AI-assisted everything",
    "AI transparency (explanations)",
    "Human-in-the-loop",
    "BYO LLM",
    "Cost-aware inference",
    "Prompt security",
    "Open weights preference",
    "RAG over finetune bias",
    "Edge compute",
    "Multi-tenant isolation",
    "Feature flags by default",
    "Vector-native architecture"
  ]
}

export function generateSeedInserts(): string {
  let sql = "-- Seed data for generation_elements table\n\n"
  
  Object.entries(seedData).forEach(([type, items]) => {
    sql += `-- ${type} elements\n`
    items.forEach(item => {
      sql += `INSERT INTO generation_elements (type, content) VALUES ('${type}', '${item.replace(/'/g, "''")}');\n`
    })
    sql += "\n"
  })
  
  return sql
}

export function getTotalElementsCount(): number {
  return Object.values(seedData).reduce((total, items) => total + items.length, 0)
}